        ctl-opt dftactgrp(*no) actgrp('SLOWS') ALWNULL(*INPUTONLY)
                bnddir('*LIBL/SLOWS');

        //---------------------------------------------------------
        // P R O T O T Y P E S
        //---------------------------------------------------------

        // WS logging procedures
       /copy qrpgleref,wslog_h

        //---------------------------------------------------------
        // V A R I A B L E S
        //---------------------------------------------------------

        dcl-ds wsreqpf ext qualified;
          rqpayload sqltype(CLOB: 32000);
        end-ds;
          // CLOB data type equates to data structure
          // e.g.
          // dcl-ds data;
          //   data_len;
          //   data_data;
          // end-ds;

        dcl-s gJob char(30);

        //---------------------------------------------------------
        // M A I N L I N E
        //---------------------------------------------------------

        // Set SQL options
        exec sql
          set option commit = *none, datfmt = *iso;

        // Initialise the program
        if initialise();
          // Check if job is killed
          doU quitLoop();

            // Read through pending web service requests
            selectWS();
            doW fetchWS();

              // Get the service details
              getServiceWS();

              // Process the QS request
              processWS();

            endDo;

            // Kill locks
            closeWS();
          endDo;

        endIf;

        tidyUp();

        return;

        //---------------------------------------------------------
        // P R O C E D U R E S
        //---------------------------------------------------------

        //-----------------------------------------------------------------------
        // Program won't start if not initialised
        //-----------------------------------------------------------------------
        dcl-proc initialise;
          dcl-pi *n ind;
          end-pi;

          dcl-s occ zoned(2:0);
          dcl-s ok  ind inz(*on);

          // Retrieve job name
          exec sql
            set :gJob = qsys2.job_name;
          sqlCheck();

          if logOpen();
            logWrite('Web service processor job: '+%trim(gJob)+' started.');
          else;
            logClose();
            ok = *off;
          endIf;

          // Retrieve the occurrence of the processor from the job name
          monitor;
            occ = %int(%subst(%trimr(gJob):%len(%trimr(gJob))-1:2));
          on-error;
            occ = 1;
          //logWrite('Web service processor job: '+%trim(gJob)+' misnamed.');
          //ok  = *off;
          endMon;

          if ok;
            // Delete any previous job
            exec sql
              delete from WSJOBSPF
              where  JBOCCRNC = :occ;
            // Insert into the job monitor file
            exec sql
              insert into WSJOBSPF
              values (:gJob, :occ, '*ACTIVE');

          endIf;

          if not ok;
            logWrite('Web service processor did not initialise.');
          endIf;

          return ok ;

        end-proc;

        //-----------------------------------------------------------------------
        dcl-proc quitLoop;
          dcl-pi *n ind;
          end-pi;

          dcl-s jobStatus char(10);

          dcl-pr sleep int(10:0)  extproc('sleep');
            seconds    uns(10:0) value;
          end-pr;

          // Retrieve the job status in case we've been told to end
          exec sql
            select JBSTATUS into :jobStatus
            from   WSJOBSPF
            where  JBNAME = :gJob;

          if jobStatus = '*ENDING' or
             jobStatus = '*ENDED'  ;
            // Kill the loop
            return *on;
          endIf;

          // Wait before going through the loop again
          sleep(5);
          return *off;

        end-proc;

        //-----------------------------------------------------------------------
        dcl-proc selectWS;

          exec sql
            declare slowsc1 cursor for
            (select * from WSREQPF
             where  rqstatus = 'PENDING')
            for update;

          exec sql
            open    slowsc1;

          return;
        end-proc;

        //-----------------------------------------------------------------------
        dcl-proc fetchWS;
          dcl-pi *n ind;
          end-pi;

          dcl-s eof ind;

          // If not cleared it messes up the payload fetch
          clear WSREQPF;

          exec sql
            fetch slowsc1 into :WSREQPF;

          // Check for end of file
          if sqlCheck() = 'EOF';
            return *off;
          endIf;

          logWrite('Processing request number ' + %trim(%char(WSREQPF.rqid)));

          return *on;

        end-proc;

        //-----------------------------------------------------------------------
        dcl-proc closeWS;

          exec sql
            close slowsc1;

          return;

        end-proc;

        //-----------------------------------------------------------------------
        dcl-proc getServiceWS;
          dcl-s host char(64);
          dcl-s string  char(256);
          dcl-s replace char(1024);
          dcl-s header  char(2048);
          dcl-s myxml sqltype(XML_CLOB:30000);
          dcl-ds wsfuncpf ext qualified;
          end-ds;

          // Get service details
          exec sql
            select * into :WSFUNCPF
            from   WSFUNCPF
            where  FNSERVICE = :WSREQPF.rqservice
            fetch first row only ;

          // check xml payload
          if WSFUNCPF.fnpaytype = 'XML';
            monitor;
              myxml = WSREQPF.rqpayload_data;
            on-error;
              logWrite('XML was not well formed.');
            endMon;
          endIf;

          // Get server details
          exec sql
            select SVHOST into :host
            from   WSSERVPF
            where  SVSERVER = :WSFUNCPF.fnserver
            fetch first row only ;

          if %scan('<httpHeader>':WSFUNCPF.fnheader) > 0;
            // Add behavioural attributes to web service call
            if WSFUNCPF.fncntimeot > 0;
              string = 'connectionTimeout="'
                     + %trim(%char(WSFUNCPF.fncntimeot)) + '"';
            endIf;
            if WSFUNCPF.fnrdtimeot > 0;
              string = %trimr(string) + ' '
                     + 'readTimeout="'+%trim(%char(WSFUNCPF.fnrdtimeot)) + '"';
            endIf;
            if WSFUNCPF.fnfllwrdct = 'true';
              string = %trimr(string) + ' ' + 'followRedirects="true"';
            endIf;
            if WSFUNCPF.fnfllwrdct = 'false';
              string = %trimr(string) + ' ' + 'followRedirects="false"';
            endIf;
            if WSFUNCPF.fnusecache = 'true';
              string = %trimr(string) + ' ' + 'useCaches="true"';
            endIf;
            if WSFUNCPF.fnusecache = 'false';
              string = %trimr(string) + ' ' + 'useCaches="false"';
            endIf;

            if string <> *blanks;
              header = WSFUNCPF.fnheader;
              replace='<httpHeader ' + %trim(string) + '>';
              header = %scanrpl('<httpHeader>':replace:WSFUNCPF.fnheader);
              WSFUNCPF.fnheader = header;
            endIf;
          endIf;

          // Build url and header to web service
          WSREQPF.rqurl = %trim(host) + %trim(WSFUNCPF.fnendpt);
          logWrite('URL ' + WSREQPF.rqurl);
          WSREQPF.rqheader = WSFUNCPF.fnheader;
          logWrite('Request header ' + WSFUNCPF.fnheader);

          return;

        end-proc;

        //-----------------------------------------------------------------------
        dcl-proc processWS;

          dcl-s url            char(1024);
          dcl-s httpHeader     char(2048);
          dcl-s payload        char(30000);
          dcl-s responseHeader varchar(2048);
          dcl-s response       varchar(30000);
          dcl-s start          timestamp   ;
          dcl-s end            timestamp   ;
          dcl-s state          char(5)     ;
          dcl-s status         char(10)    ;
          dcl-s count          zoned(3:0)  ;
          dcl-s error          ind         ;

          // Populate request parameters
          payload    = WSREQPF.rqpayload_data;
          httpHeader = WSREQPF.rqheader;
          url        = WSREQPF.rqurl   ;
          start      = %timestamp();
          logWrite('Request payload ' + %trimr(payload));

          // Trigger web service request
          exec sql
            select          varchar(responseHttpHeader, 2048 )    ,
                   coalesce(varchar(responseMsg       ,30000 ) ,
                            varchar(responseHttpHeader, 2048 )  )
            into   :responseHeader, :response
            from   table(systools.httppostclobverbose(
                   :url                        ,
                   :httpHeader                 ,
                   :payload                          )
                        )
            as     request;

          // Need some error routine
          state = sqlCheck();
          error = (state = 'ERROR');

          // Log response
          logWrite('Response header ' + %trimr(responseHeader));
          logWrite('Response payload ' + %trimr(response));

          // Tag end time
          end = %timestamp();

          // Update Request File
          // ===================
          // Set to complete or error and move to next
          status = 'COMPLETE';
          if error;
            status = 'ERROR';
          endIf;
          exec sql
            update WSREQPF
            set    RQSTATUS  = :status,
                   RQURL     = :url,
                   RQHEADER  = :httpHeader,
                   RQENDTS   = :end,
                   RQSTARTTS = :start
            where current of slowsc1;
          sqlCheck();

          // Update Response File
          // ====================
          // Just in case this already exists we can try to delete first
          // (this is unlikely 99.99% of the time...)
          exec sql
            select count(*) into :count
            from   WSRESPF
            where  rsid = :WSREQPF.rqid;
          sqlCheck();
          if count > 0;
            exec sql
              delete from WSRESPF
              where  rsid = :WSREQPF.rqid;
            sqlCheck();
          endIf;

          // Write response file
          exec sql
            insert into WSRESPF
            values ( :WSREQPF.rqid  ,          //RSID
                     :state         ,          //RSHTTP
                     :responseHeader,          //RSHEADER
                     :response      ,          //RSPAYLOAD
                     :end           );         //RSRESPTS
          sqlCheck();

          return;

        end-proc;

        //-----------------------------------------------------------------------
        dcl-proc tidyUp;

          // Write last log entry
          logWrite('Web service processor job ending...');

          logClose();

          // Update the monitor file to say we ended
          exec sql
            update WSJOBSPF
            set    JBSTATUS = '*ENDED'
            where  JBNAME = :gJob;

          return;

        end-proc;
